// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NumeratorSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
@_exported import NumeratorSDK
import OSLog
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
public typealias DesignatedError = Swift.Decodable & Swift.Error
public enum NetworkError : Swift.Error {
  case decoding
  case designated(any Swift.Decodable & Swift.Error)
  case underlying(any Swift.Error)
}
extension NumeratorSDK.NetworkError : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension NumeratorSDK.NetworkError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct FlagValue : Swift.Codable {
  public let booleanValue: Swift.Bool?
  public let stringValue: Swift.String?
  public let doubleValue: Swift.Double?
  public let longValue: Swift.Int?
  public init(booleanValue: Swift.Bool?, stringValue: Swift.String?, doubleValue: Swift.Double?, longValue: Swift.Int?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FeatureFlagValue : Swift.Codable {
  public let key: Swift.String
  public let status: NumeratorSDK.FlagStatusType
  public let value: NumeratorSDK.FlagValue
  public let valueType: NumeratorSDK.FlagValueType
  public init(key: Swift.String, status: NumeratorSDK.FlagStatusType, value: NumeratorSDK.FlagValue, valueType: NumeratorSDK.FlagValueType)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FlagVariation : Swift.Codable {
  public let name: Swift.String
  public let value: NumeratorSDK.FlagValue
  public init(name: Swift.String, value: NumeratorSDK.FlagValue)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NumeratorInfo {
  public static let version: Swift.String
}
@_hasMissingDesignatedInitializers public class NumeratorClient {
  public static var instances: NumeratorSDK.NumeratorClient? {
    get
  }
  public var isInitialized: Swift.Bool {
    get
  }
  public static func start(_ config: NumeratorSDK.NumeratorConfigs, completion: (() -> Swift.Void)? = nil)
  public func close()
  @objc deinit
}
public struct NumeratorAPIError : NumeratorSDK.DesignatedError {
  public var message: Swift.String?
  public var httpStatus: Swift.Int?
  public var errorCode: Swift.String?
  public var localizedMessage: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
extension NumeratorSDK.NumeratorAPIError : Foundation.LocalizedError, Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
}
public enum FlagValueType : Swift.String, Swift.Codable {
  case BOOLEAN
  case STRING
  case LONG
  case DOUBLE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias NumeratorFlagKey = Swift.String
public enum NumeratorValueTypeException : Swift.Error {
  case typeMismatch
  case unsupportedType
  public static func == (a: NumeratorSDK.NumeratorValueTypeException, b: NumeratorSDK.NumeratorValueTypeException) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension NumeratorSDK.NumeratorValueTypeException : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct FeatureFlagList : Swift.Codable {
  public let count: Swift.Int
  public let data: [NumeratorSDK.FeatureFlag]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum FlagStatusType : Swift.String, Swift.Codable {
  case ON
  case OFF
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension NumeratorSDK.NumeratorClient {
  #if compiler(>=5.3) && $AsyncAwait
  public func featureFlags(page: Swift.Int = 0, size: Swift.Int = 20) async throws -> NumeratorSDK.FeatureFlagList
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func featureFlagDetails(forKey: NumeratorSDK.NumeratorFlagKey) async throws -> NumeratorSDK.FeatureFlag
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func boolVariationValue(forKey: NumeratorSDK.NumeratorFlagKey, defaultValue: Swift.Bool, context: [Swift.String : Any] = [:]) async -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func stringVariationValue(forKey: NumeratorSDK.NumeratorFlagKey, defaultValue: Swift.String, context: [Swift.String : Any] = [:]) async -> Swift.String
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func doubleVariationValue(forKey: NumeratorSDK.NumeratorFlagKey, defaultValue: Swift.Double, context: [Swift.String : Any] = [:]) async -> Swift.Double
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func longVariationValue(forKey: NumeratorSDK.NumeratorFlagKey, defaultValue: Swift.Int, context: [Swift.String : Any] = [:]) async -> Swift.Int
  #endif
}
public struct FeatureFlag : Swift.Codable {
  public let name: Swift.String, key: Swift.String, description: Swift.String, createdAt: Swift.String
  public let status: NumeratorSDK.FlagStatusType
  public let defaultOnVariation: NumeratorSDK.FlagVariation, defaultOffVariation: NumeratorSDK.FlagVariation
  public let valueType: NumeratorSDK.FlagValueType
  public init(name: Swift.String, key: Swift.String, description: Swift.String, createdAt: Swift.String, status: NumeratorSDK.FlagStatusType, defaultOnVariation: NumeratorSDK.FlagVariation, defaultOffVariation: NumeratorSDK.FlagVariation, valueType: NumeratorSDK.FlagValueType)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
extension Swift.Dictionary where Key == Swift.String, Value == Swift.String {
  public static var empty: NumeratorSDK.HTTPHeaders
}
public struct NumeratorConfigs {
  public var apiKey: Swift.String
  public var baseUrl: Foundation.URL
  public var connectTimeout: Foundation.TimeInterval
  public var urlSessionConfiguration: Foundation.URLSessionConfiguration
  public init(apiKey: Swift.String, isDebugMode: Swift.Bool)
  public init(apiKey: Swift.String, baseUrl: Foundation.URL, connectTimeout: Foundation.TimeInterval, urlSessionConfiguration: Foundation.URLSessionConfiguration)
  public init(apiKey: Swift.String, baseUrl: Foundation.URL)
}
extension NumeratorSDK.FlagValueType : Swift.Equatable {}
extension NumeratorSDK.FlagValueType : Swift.Hashable {}
extension NumeratorSDK.FlagValueType : Swift.RawRepresentable {}
extension NumeratorSDK.NumeratorValueTypeException : Swift.Equatable {}
extension NumeratorSDK.NumeratorValueTypeException : Swift.Hashable {}
extension NumeratorSDK.FlagStatusType : Swift.Equatable {}
extension NumeratorSDK.FlagStatusType : Swift.Hashable {}
extension NumeratorSDK.FlagStatusType : Swift.RawRepresentable {}
