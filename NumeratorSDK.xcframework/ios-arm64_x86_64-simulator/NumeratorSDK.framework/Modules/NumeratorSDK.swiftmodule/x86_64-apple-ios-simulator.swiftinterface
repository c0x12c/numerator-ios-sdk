// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NumeratorSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
@_exported import NumeratorSDK
import OSLog
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
public typealias DesignatedError = Swift.Decodable & Swift.Error
extension Swift.String : Swift.Error {
}
public enum NetworkError : Swift.Error {
  case decoding(Swift.String)
  case designated(any Swift.Error)
  case underlying(any Swift.Error)
}
extension NumeratorSDK.NetworkError : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension NumeratorSDK.NetworkError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct PollingModes {
  public static func autoPoll(autoPollIntervalSeconds: Foundation.TimeInterval) -> NumeratorSDK.NumeratorPollingConfig
  public static func manuallyStartPolling(autoPollIntervalSeconds: Foundation.TimeInterval) -> NumeratorSDK.NumeratorPollingConfig
  public static func fetchOnce() -> NumeratorSDK.NumeratorPollingConfig
}
public class FeatureFlagCollection : Swift.Codable {
  final public let flags: [NumeratorSDK.FeatureFlagVariationValue]
  public init(flags: [NumeratorSDK.FeatureFlagVariationValue])
  required public init(from decoder: any Swift.Decoder) throws
  public func getFlag(key: Swift.String) -> NumeratorSDK.FeatureFlagVariationValue?
  public func getFeatureFlagMap() -> [Swift.String : NumeratorSDK.FeatureFlagVariationValue]
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct NumeratorPollingConfig {
  public var pollImmediate: Swift.Bool
  public var pollingInterval: Foundation.TimeInterval
}
public class NumeratorPollingTestDataSource {
  public init()
  public func flagVariation(key: Swift.String) -> NumeratorSDK.FeatureFlagVariationValue?
  public func getFlags() -> [NumeratorSDK.FeatureFlagVariationValue]
  public func getFeatureFlagsMap() -> [Swift.String : NumeratorSDK.FeatureFlagVariationValue]
  public func updateFlagVariation(key: Swift.String, newValue: Any)
  public func clearFlags()
  public func removeFlag(key: Swift.String)
  @objc deinit
}
public struct VariationValue : Swift.Codable {
  public let booleanValue: Swift.Bool?
  public let stringValue: Swift.String?
  public let doubleValue: Swift.Double?
  public let longValue: Swift.Int?
  public init(booleanValue: Swift.Bool?, stringValue: Swift.String?, doubleValue: Swift.Double?, longValue: Swift.Int?)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FeatureFlagVariationValue : Swift.Codable {
  public let key: Swift.String
  public let value: NumeratorSDK.VariationValue
  public let valueType: NumeratorSDK.FlagValueType
  public init(key: Swift.String, value: NumeratorSDK.VariationValue, valueType: NumeratorSDK.FlagValueType)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class DefaultContextProvider : NumeratorSDK.ContextProvider {
  public init()
  public func set(key: Swift.String, value: Any)
  public func unset(conditionKey: Swift.String)
  public func clear()
  public func getContext() -> [Swift.String : Any]
  @objc deinit
}
public struct FlagEvaluationDetail<T> {
  public let key: Swift.String
  public let value: T
  public let reason: [Swift.String : Any]?
}
public struct FlagVariation : Swift.Codable {
  public let name: Swift.String
  public let value: NumeratorSDK.VariationValue
  public init(name: Swift.String, value: NumeratorSDK.VariationValue)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum NumeratorInfo {
}
@_hasMissingDesignatedInitializers final public class NumeratorClient {
  @objc deinit
}
public class NumeratorServerTestDataSource {
  public init(defaultContext: [Swift.String : Any] = [:])
  public func setContext(key: Swift.String, value: Any)
  public func stringFlagEvaluationDetail(key: Swift.String, defaultValue: Swift.String, context: [Swift.String : Any]? = nil, useDefaultContext: Swift.Bool = true) -> NumeratorSDK.FlagEvaluationDetail<Swift.String>
  public func booleanFlagEvaluationDetail(key: Swift.String, defaultValue: Swift.Bool, context: [Swift.String : Any]? = nil, useDefaultContext: Swift.Bool = true) -> NumeratorSDK.FlagEvaluationDetail<Swift.Bool>
  public func longFlagEvaluationDetail(key: Swift.String, defaultValue: Swift.Int, context: [Swift.String : Any]? = nil, useDefaultContext: Swift.Bool = true) -> NumeratorSDK.FlagEvaluationDetail<Swift.Int>
  public func doubleFlagEvaluationDetail(key: Swift.String, defaultValue: Swift.Double, context: [Swift.String : Any]? = nil, useDefaultContext: Swift.Bool = true) -> NumeratorSDK.FlagEvaluationDetail<Swift.Double>
  public func updateFlag<T>(flag: NumeratorSDK.FlagEvaluationDetail<T>, context: [Swift.String : Any]? = nil, useDefaultContext: Swift.Bool = true)
  public func clearFlags()
  public var underlyingGetFeatureFlag: NumeratorSDK.FeatureFlagListResponse?
  #if compiler(>=5.3) && $AsyncAwait
  public func getFeatureFlags(page: Swift.Int, size: Swift.Int) async throws -> NumeratorSDK.FeatureFlagListResponse
  #endif
  public var underlyingFeatureFlagDetails: NumeratorSDK.FeatureFlag?
  #if compiler(>=5.3) && $AsyncAwait
  public func featureFlagDetails(key: Swift.String) async throws -> NumeratorSDK.FeatureFlag
  #endif
  public var underlyingFlagValueByKey: NumeratorSDK.FeatureFlagVariationValue?
  #if compiler(>=5.3) && $AsyncAwait
  public func flagValueByKey(forKey: NumeratorSDK.NumeratorFlagKey, context: [Swift.String : Any]) async throws -> NumeratorSDK.FeatureFlagVariationValue
  #endif
  @objc deinit
}
public struct NumeratorAPIError : NumeratorSDK.DesignatedError {
  public var message: Swift.String?
  public var httpStatus: Swift.Int?
  public var errorCode: Swift.String?
  public var localizedMessage: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
}
extension NumeratorSDK.NumeratorAPIError : Foundation.LocalizedError, Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol NumeratorDataSource {
  var flagUpdatedPublisher: NumeratorSDK.FlagUpdatedPublisher { get }
  var flagUpdatedErrorPublisher: NumeratorSDK.FlagUpdatedErrorPublisher { get }
  func getContext() -> any NumeratorSDK.ContextProvider
  func setContext(context: any NumeratorSDK.ContextProvider)
  func startPolling()
  func stopPolling()
  #if compiler(>=5.3) && $AsyncAwait
  func getFeatureFlags(page: Swift.Int, size: Swift.Int) async throws -> NumeratorSDK.FeatureFlagListResponse
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func featureFlagDetails(key: Swift.String) async throws -> NumeratorSDK.FeatureFlag
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func flagValueByKey(forKey: NumeratorSDK.NumeratorFlagKey, context: [Swift.String : Any]) async throws -> NumeratorSDK.FeatureFlagVariationValue
  #endif
  func getIntFeatureFlag(key: Swift.String, defaultValue: Swift.Int) -> Swift.Int
  #if compiler(>=5.3) && $AsyncAwait
  func getIntFeatureFlagDetail(key: Swift.String, defaultValue: Swift.Int, context: [Swift.String : Any], useDefaultContext: Swift.Bool) async -> NumeratorSDK.FlagEvaluationDetail<Swift.Int>
  #endif
  func getDoubleFeatureFlag(key: Swift.String, defaultValue: Swift.Double) -> Swift.Double
  #if compiler(>=5.3) && $AsyncAwait
  func getDoubleFeatureFlagDetail(key: Swift.String, defaultValue: Swift.Double, context: [Swift.String : Any], useDefaultContext: Swift.Bool) async -> NumeratorSDK.FlagEvaluationDetail<Swift.Double>
  #endif
  func getBoolFeatureFlag(key: Swift.String, defaultValue: Swift.Bool) -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  func getBoolFeatureFlagDetail(key: Swift.String, defaultValue: Swift.Bool, context: [Swift.String : Any], useDefaultContext: Swift.Bool) async -> NumeratorSDK.FlagEvaluationDetail<Swift.Bool>
  #endif
  func getStringFeatureFlag(key: Swift.String, defaultValue: Swift.String) -> Swift.String
  #if compiler(>=5.3) && $AsyncAwait
  func getStringFeatureFlagDetail(key: Swift.String, defaultValue: Swift.String, context: [Swift.String : Any], useDefaultContext: Swift.Bool) async -> NumeratorSDK.FlagEvaluationDetail<Swift.String>
  #endif
  func getFeatureFlags() -> [NumeratorSDK.FeatureFlagVariationValue]
  func getFeatureFlagMap() -> [Swift.String : NumeratorSDK.FeatureFlagVariationValue]
}
extension NumeratorSDK.NumeratorDataSource {
  public var flagUpdatedPublisher: NumeratorSDK.FlagUpdatedPublisher {
    get
  }
  public var flagUpdatedErrorPublisher: NumeratorSDK.FlagUpdatedErrorPublisher {
    get
  }
  public func getContext() -> any NumeratorSDK.ContextProvider
  public func setContext(context: any NumeratorSDK.ContextProvider)
  public func startPolling()
  public func stopPolling()
}
public class NumeratorFeatureFlagProvider {
  public static var shared: NumeratorSDK.NumeratorFeatureFlagProvider! {
    get
  }
  public static func configure(apiKey: Swift.String, pollingConfig: NumeratorSDK.NumeratorPollingConfig)
  public static func configure(config: NumeratorSDK.NumeratorConfig, context: any NumeratorSDK.ContextProvider = DefaultContextProvider())
  public init(apiKey: Swift.String, pollingConfig: NumeratorSDK.NumeratorPollingConfig)
  public init(config: NumeratorSDK.NumeratorConfig, context: any NumeratorSDK.ContextProvider = DefaultContextProvider())
  public init(dataSource: any NumeratorSDK.NumeratorDataSource)
  public func getContext() -> any NumeratorSDK.ContextProvider
  public func setContext(context: any NumeratorSDK.ContextProvider)
  public func setDefaultBackupSource(source: [Swift.String : NumeratorSDK.FeatureFlagVariationValue])
  public func version() -> Swift.String
  public func startPolling()
  public func stopPolling()
  public var flagUpdatedPublisher: NumeratorSDK.FlagUpdatedPublisher {
    get
  }
  public var flagUpdatedErrorPublisher: NumeratorSDK.FlagUpdatedErrorPublisher {
    get
  }
  public func printToConsole(_ printToConsole: Swift.Bool)
  #if compiler(>=5.3) && $AsyncAwait
  public func getFeatureFlags(page: Swift.Int, size: Swift.Int) async throws -> NumeratorSDK.FeatureFlagListResponse
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func featureFlagDetails(key: Swift.String) async throws -> NumeratorSDK.FeatureFlag
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func flagValueByKey(forKey: NumeratorSDK.NumeratorFlagKey, context: [Swift.String : Any] = [:]) async throws -> NumeratorSDK.FeatureFlagVariationValue
  #endif
  public func getIntFeatureFlag(key: Swift.String, defaultValue: Swift.Int) -> Swift.Int
  public func getBoolFeatureFlag(key: Swift.String, defaultValue: Swift.Bool) -> Swift.Bool
  public func getStringFeatureFlag(key: Swift.String, defaultValue: Swift.String) -> Swift.String
  public func getDoubleFeatureFlag(key: Swift.String, defaultValue: Swift.Double) -> Swift.Double
  #if compiler(>=5.3) && $AsyncAwait
  public func getBoolFeatureFlag(key: Swift.String, defaultValue: Swift.Bool, context: [Swift.String : Any] = [:], useDefaultContext: Swift.Bool = true) async -> NumeratorSDK.FlagEvaluationDetail<Swift.Bool>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getStringFeatureFlag(key: Swift.String, defaultValue: Swift.String, context: [Swift.String : Any] = [:], useDefaultContext: Swift.Bool = true) async -> NumeratorSDK.FlagEvaluationDetail<Swift.String>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getDoubleFeatureFlag(key: Swift.String, defaultValue: Swift.Double, context: [Swift.String : Any] = [:], useDefaultContext: Swift.Bool = true) async -> NumeratorSDK.FlagEvaluationDetail<Swift.Double>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getIntFeatureFlag(key: Swift.String, defaultValue: Swift.Int, context: [Swift.String : Any] = [:], useDefaultContext: Swift.Bool = true) async -> NumeratorSDK.FlagEvaluationDetail<Swift.Int>
  #endif
  @objc deinit
}
public enum FlagValueType : Swift.String, Swift.Codable {
  case BOOLEAN
  case STRING
  case LONG
  case DOUBLE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol ContextProvider {
  func set(key: Swift.String, value: Any)
  func unset(conditionKey: Swift.String)
  func clear()
  func getContext() -> [Swift.String : Any]
}
@propertyWrapper public class NumeratorFeatureFlag<Value> {
  public var wrappedValue: Value {
    get
  }
  public init(key: Swift.String, defaultValue: Value, flagProvider: NumeratorSDK.NumeratorFeatureFlagProvider)
  @objc deinit
}
public class NumeratorTestDataSource : NumeratorSDK.NumeratorDataSource {
  public init(pollingTestDataSource: NumeratorSDK.NumeratorPollingTestDataSource, serverTestDataSource: NumeratorSDK.NumeratorServerTestDataSource)
  #if compiler(>=5.3) && $AsyncAwait
  public func getFeatureFlags(page: Swift.Int, size: Swift.Int) async throws -> NumeratorSDK.FeatureFlagListResponse
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func featureFlagDetails(key: Swift.String) async throws -> NumeratorSDK.FeatureFlag
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func flagValueByKey(forKey: NumeratorSDK.NumeratorFlagKey, context: [Swift.String : Any]) async throws -> NumeratorSDK.FeatureFlagVariationValue
  #endif
  public func getIntFeatureFlag(key: Swift.String, defaultValue: Swift.Int) -> Swift.Int
  #if compiler(>=5.3) && $AsyncAwait
  public func getIntFeatureFlagDetail(key: Swift.String, defaultValue: Swift.Int, context: [Swift.String : Any], useDefaultContext: Swift.Bool) async -> NumeratorSDK.FlagEvaluationDetail<Swift.Int>
  #endif
  public func getDoubleFeatureFlag(key: Swift.String, defaultValue: Swift.Double) -> Swift.Double
  #if compiler(>=5.3) && $AsyncAwait
  public func getDoubleFeatureFlagDetail(key: Swift.String, defaultValue: Swift.Double, context: [Swift.String : Any], useDefaultContext: Swift.Bool) async -> NumeratorSDK.FlagEvaluationDetail<Swift.Double>
  #endif
  public func getBoolFeatureFlag(key: Swift.String, defaultValue: Swift.Bool) -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  public func getBoolFeatureFlagDetail(key: Swift.String, defaultValue: Swift.Bool, context: [Swift.String : Any], useDefaultContext: Swift.Bool) async -> NumeratorSDK.FlagEvaluationDetail<Swift.Bool>
  #endif
  public func getStringFeatureFlag(key: Swift.String, defaultValue: Swift.String) -> Swift.String
  #if compiler(>=5.3) && $AsyncAwait
  public func getStringFeatureFlagDetail(key: Swift.String, defaultValue: Swift.String, context: [Swift.String : Any], useDefaultContext: Swift.Bool) async -> NumeratorSDK.FlagEvaluationDetail<Swift.String>
  #endif
  public func getFeatureFlags() -> [NumeratorSDK.FeatureFlagVariationValue]
  public func getFeatureFlagMap() -> [Swift.String : NumeratorSDK.FeatureFlagVariationValue]
  @objc deinit
}
public typealias NumeratorFlagKey = Swift.String
public enum NumeratorValueTypeException : Swift.Error {
  case typeMismatch
  case unsupportedType
  public static func == (a: NumeratorSDK.NumeratorValueTypeException, b: NumeratorSDK.NumeratorValueTypeException) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension NumeratorSDK.NumeratorValueTypeException : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public typealias FlagUpdatedPublisher = Combine.PassthroughSubject<Swift.Void, Swift.Never>
public typealias FlagUpdatedErrorPublisher = Combine.PassthroughSubject<any Swift.Error, Swift.Never>
public struct FeatureFlagListResponse : Swift.Codable {
  public let count: Swift.Int
  public let data: [NumeratorSDK.FeatureFlag]
  public init(count: Swift.Int, data: [NumeratorSDK.FeatureFlag])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum FlagStatusType : Swift.String, Swift.Codable {
  case ON
  case OFF
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension NumeratorSDK.NumeratorClient {
  final public func getContextProvider() -> any NumeratorSDK.ContextProvider
  final public func setContextProvider(context: any NumeratorSDK.ContextProvider)
  #if compiler(>=5.3) && $AsyncAwait
  final public func featureFlags(page: Swift.Int = 0, size: Swift.Int = 20) async throws -> NumeratorSDK.FeatureFlagListResponse
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func featureFlagDetails(forKey: NumeratorSDK.NumeratorFlagKey) async throws -> NumeratorSDK.FeatureFlag
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func flagValueByKey(forKey: NumeratorSDK.NumeratorFlagKey, context: [Swift.String : Any] = [:]) async throws -> NumeratorSDK.FeatureFlagVariationValue
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func boolVariationValue(forKey: NumeratorSDK.NumeratorFlagKey, defaultValue: Swift.Bool, context: [Swift.String : Any] = [:], useDefaultContext: Swift.Bool) async -> NumeratorSDK.FlagEvaluationDetail<Swift.Bool>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func stringVariationValue(forKey: NumeratorSDK.NumeratorFlagKey, defaultValue: Swift.String, context: [Swift.String : Any] = [:], useDefaultContext: Swift.Bool) async -> NumeratorSDK.FlagEvaluationDetail<Swift.String>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func doubleVariationValue(forKey: NumeratorSDK.NumeratorFlagKey, defaultValue: Swift.Double, context: [Swift.String : Any] = [:], useDefaultContext: Swift.Bool) async -> NumeratorSDK.FlagEvaluationDetail<Swift.Double>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func longVariationValue(forKey: NumeratorSDK.NumeratorFlagKey, defaultValue: Swift.Int, context: [Swift.String : Any] = [:], useDefaultContext: Swift.Bool) async -> NumeratorSDK.FlagEvaluationDetail<Swift.Int>
  #endif
}
public protocol CacheFlagProvider {
  func read() -> NumeratorSDK.FeatureFlagCollection
  func write(collection: NumeratorSDK.FeatureFlagCollection)
  func clear()
}
public protocol CacheDirectoryProvider {
  func getCacheDirectory() -> Foundation.URL
}
public struct FeatureFlag : Swift.Codable {
  public let name: Swift.String, key: Swift.String, createdAt: Swift.String
  public let description: Swift.String?
  public let status: NumeratorSDK.FlagStatusType
  public let defaultOnVariation: NumeratorSDK.FlagVariation, defaultOffVariation: NumeratorSDK.FlagVariation
  public let valueType: NumeratorSDK.FlagValueType
  public init(name: Swift.String, key: Swift.String, description: Swift.String?, createdAt: Swift.String, status: NumeratorSDK.FlagStatusType, defaultOnVariation: NumeratorSDK.FlagVariation, defaultOffVariation: NumeratorSDK.FlagVariation, valueType: NumeratorSDK.FlagValueType)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
extension Swift.Dictionary where Key == Swift.String, Value == Swift.String {
  public static var empty: NumeratorSDK.HTTPHeaders
}
public struct NumeratorConfig {
  public var apiKey: Swift.String
  public var baseUrl: Foundation.URL
  public var connectTimeout: Foundation.TimeInterval
  public var urlSessionConfiguration: Foundation.URLSessionConfiguration
  public var pollingConfig: NumeratorSDK.NumeratorPollingConfig
  public init(apiKey: Swift.String, pollingConfig: NumeratorSDK.NumeratorPollingConfig)
  public init(apiKey: Swift.String, baseUrl: Foundation.URL, pollingConfig: NumeratorSDK.NumeratorPollingConfig)
  public init(apiKey: Swift.String, baseUrl: Foundation.URL, connectTimeout: Foundation.TimeInterval, urlSessionConfiguration: Foundation.URLSessionConfiguration, pollingConfig: NumeratorSDK.NumeratorPollingConfig)
}
extension NumeratorSDK.FlagValueType : Swift.Equatable {}
extension NumeratorSDK.FlagValueType : Swift.Hashable {}
extension NumeratorSDK.FlagValueType : Swift.RawRepresentable {}
extension NumeratorSDK.NumeratorValueTypeException : Swift.Equatable {}
extension NumeratorSDK.NumeratorValueTypeException : Swift.Hashable {}
extension NumeratorSDK.FlagStatusType : Swift.Equatable {}
extension NumeratorSDK.FlagStatusType : Swift.Hashable {}
extension NumeratorSDK.FlagStatusType : Swift.RawRepresentable {}
